name: Build macOS App

on:
  push:
    branches: [ main ] # Trigger on pushes to main
    tags:
      - 'v*' # Trigger on version tags like v1.0, v2.1.3
  pull_request:
    branches: [ main ] # Optional: Trigger on PRs to main
  workflow_dispatch: # Allow manual triggering

permissions: # Added: Grant permission to create releases
  contents: write

jobs:
  build:
    name: Build macOS App Bundle
    runs-on: macos-latest # Use the latest macOS runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Ensure py2app is installed if not in requirements.txt
          pip install py2app

      - name: Install build tools (fswatch, rclone, create-dmg)
        run: |
          brew install fswatch
          brew install rclone
          brew install create-dmg

      - name: Run build script
        run: python build_app.py --non-interactive # Execute build script non-interactively (fswatch/rclone pre-installed)

      # Fix ownership, attributes, and permissions on the app bundle for distribution
      - name: Fix app permissions
        run: |
          APP_PATH="dist/TurboSync.app"
          echo "Setting ownership to runner:staff on ${APP_PATH}..."
          sudo chown -R runner:staff "${APP_PATH}"
          echo "Recursively clearing extended attributes on ${APP_PATH}..."
          xattr -cr "${APP_PATH}"
          echo "Setting standard permissions (755) on ${APP_PATH}..."
          chmod -R 755 "${APP_PATH}"
          echo "Permissions fixed."

      # --- Release Steps (only run on tag push) ---
      - name: Determine Asset Name and Path (for Release)
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        id: vars
        run: |
          APP_NAME="TurboSync" # Or derive from setup.py if needed
          APP_PATH="dist/${APP_NAME}.app"
          TAG_NAME="${{ github.ref_name }}" # e.g., v0.1.0
          DMG_NAME="${APP_NAME}-${TAG_NAME}.dmg" # Changed from ZIP_NAME
          echo "APP_PATH=${APP_PATH}" >> $GITHUB_OUTPUT
          echo "DMG_NAME=${DMG_NAME}" >> $GITHUB_OUTPUT # Changed from ZIP_NAME
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Check if App exists (for Release)
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        run: |
          echo "Checking for application at ${{ steps.vars.outputs.APP_PATH }}"
          ls -l dist/
          if [ ! -d "${{ steps.vars.outputs.APP_PATH }}" ]; then
            echo "Error: Application bundle not found at ${{ steps.vars.outputs.APP_PATH }}"
            exit 1
          fi

      - name: Create DMG (for Release)
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        run: |
          echo "Creating DMG: ${{ steps.vars.outputs.DMG_NAME }} from ${{ steps.vars.outputs.APP_PATH }}"
          create-dmg \
            --volname "TurboSync ${{ steps.vars.outputs.TAG_NAME }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "TurboSync.app" 250 190 \
            --hide-extension "TurboSync.app" \
            --app-drop-link 540 185 \
            "${{ steps.vars.outputs.DMG_NAME }}" \
            "${{ steps.vars.outputs.APP_PATH }}"
          echo "DMG created: ${{ steps.vars.outputs.DMG_NAME }}"
          ls -l "${{ steps.vars.outputs.DMG_NAME }}"

      - name: Calculate DMG Checksum (for Homebrew)
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        id: checksum
        run: |
          checksum=$(shasum -a 256 "${{ steps.vars.outputs.DMG_NAME }}" | awk '{print $1}')
          echo "DMG_CHECKSUM=${checksum}" >> $GITHUB_OUTPUT
          echo "Calculated SHA256: ${checksum}"

      - name: Checkout Homebrew Tap Repo
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        uses: actions/checkout@v4
        with:
          repository: Johnr24/homebrew-turbosync
          path: homebrew-tap # Checkout into a subdirectory
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }} # Use the PAT

      - name: Update Homebrew Formula
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        run: |
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=$(echo "${{ steps.vars.outputs.TAG_NAME }}" | sed 's/^v//')
          # Construct download URL
          DOWNLOAD_URL="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ steps.vars.outputs.TAG_NAME }}/${{ steps.vars.outputs.DMG_NAME }}"
          # Get checksum from previous step
          SHA256="${{ steps.checksum.outputs.DMG_CHECKSUM }}"
          CASK_PATH="homebrew-tap/Casks/turbosync.rb" # Changed from FORMULA_PATH

          echo "Updating Cask: ${CASK_PATH}" # Changed from formula
          echo "  Version: ${VERSION}"
          echo "  Download URL: ${DOWNLOAD_URL}"
          echo "  SHA256: ${SHA256}"

          # Use Python to update the formula file reliably
          python - << EOF
          import re
          import sys

          version = "$VERSION"
          url = "$DOWNLOAD_URL"
          sha256 = "$SHA256"
          cask_path = "$CASK_PATH" # Changed from formula_path

          try:
              with open(cask_path, 'r') as f: # Changed from formula_path
                  content = f.read()

              # Update version
              content = re.sub(r'(version\s+)"[^"]+"', r'\1"' + version + '"', content)
              # Update URL
              content = re.sub(r'(url\s+)"[^"]+"', r'\1"' + url + '"', content)
              # Update sha256
              content = re.sub(r'(sha256\s+)"[^"]+"', r'\1"' + sha256 + '"', content)

              with open(cask_path, 'w') as f: # Changed from formula_path
                  f.write(content)

              print(f"Successfully updated {cask_path}") # Changed from formula_path
          except Exception as e:
              print(f"Error updating Cask file: {e}") # Changed from formula
              sys.exit(1)
          EOF

      - name: Commit and Push Formula Changes
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        run: |
          cd homebrew-tap # Change directory into the checked-out tap repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Casks/turbosync.rb # Changed from Formula/turbosync.rb
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit to Homebrew Cask." # Changed from formula
          else
            git commit -m "Update turbosync cask to version ${{ steps.vars.outputs.TAG_NAME }}" # Changed from formula
            
            echo "Attempting to push to Homebrew tap repository..."
            echo "If this fails with a 403 error, please ensure your HOMEBREW_TAP_TOKEN has the 'repo' scope"
            echo "with write access to the Johnr24/homebrew-turbosync repository."
            
            # Push using the PAT embedded in the URL for authentication, exit on error
            git push https://x-access-token:${{ secrets.HOMEBREW_TAP_TOKEN }}@github.com/Johnr24/homebrew-turbosync.git HEAD:main || {
              echo "ERROR: Failed to push to Homebrew tap repository."
              echo "Please update your HOMEBREW_TAP_TOKEN with the 'repo' scope (full control of repositories)."
              exit 1
            }
            
            echo "Successfully pushed updated Cask to Johnr24/homebrew-turbosync" # Changed from formula
          fi
          cd .. # Change back to the original directory

      - name: Create Release and Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/') # Only run for tags
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.vars.outputs.DMG_NAME }} # Changed from ZIP_NAME to DMG_NAME
          tag_name: ${{ steps.vars.outputs.TAG_NAME }}
          name: Release ${{ steps.vars.outputs.TAG_NAME }}
          body: Automated release for ${{ steps.vars.outputs.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Artifact Upload (only run on non-tag pushes/PRs) ---
      - name: Upload macOS App Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') }} # Corrected: Only run for non-tags
        uses: actions/upload-artifact@v4
        with:
          name: TurboSync-macOS-App # Name of the artifact zip file
          path: dist/TurboSync.app # Path to the built .app bundle
          if-no-files-found: error # Fail if the .app isn't found
